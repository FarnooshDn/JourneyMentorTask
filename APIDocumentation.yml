openapi: 3.0.3
info:
  title: Farnoosh's Task for Business Analysis Vacancy at Journey Mentor
  description: |-
    Products describe the specific goods or services you offer to your customers. For example, you might offer a Standard and Premium version of your goods or service; each version would be a separate Product. They can be used in conjunction with Prices to configure pricing in Payment Links, Checkout, and Subscriptions.
    
    Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products. Products help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.

    
  contact:
    email: farnooshdaneshvar1@gmail.com
  version: 1.0.0
servers:
  - url: https://api.stripe.com/v1
tags:
  - name: products
    description: Describe the specific goods or services you offer to your customers. 
  - name: prices
    description: Define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.
paths:
  /products:
    post:
      tags:
        - products
      summary: Create a product
      description: Creates a new product object. (Returns a product object if the call succeeded.)
      parameters:
        - name: name
          in: query
          description: The product’s name, meant to be displayable to the customer.
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: An identifier will be randomly generated by Stripe. You can optionally override this ID, but the ID must be unique across all products in your Stripe account.
          required: false
          schema:
            type: string
        - name: active
          in: query
          description: Whether the product is currently available for purchase. Defaults to true.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Ok (Everything worked as expected.)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
  /products/:id:
    post:
      tags:
        - products
      summary: Update a product
      description: Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged. (Returns the product object if the update succeeded.)
      parameters:
        - name: name
          in: query
          description: The product’s name, meant to be displayable to the customer.
          required: false
          schema:
            type: string
        - name: active
          in: query
          description: Whether the product is currently available for purchase. Defaults to true.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Ok (Everything worked as expected.)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
    get:
      tags:
        - products
      summary: Retrieve a product
      description: Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information. (Returns a product object if a valid identifier was provided.)
      responses:
        '200':
          description: Ok (Everything worked as expected.)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
  /prices:
    post:
      tags:
        - prices
      summary: Create a price
      description: Creates a new price for an existing product. The price can be recurring or one-time. (The newly created Price object is returned upon success. Otherwise, this call returns an error.)
      parameters:
        - name: currency
          in: query
          description: Three-letter ISO currency code, in lowercase. Must be a supported currenc.
          required: true
          schema:
            type: string
            enum:
              - ISO currency codes
        - name: active
          in: query
          description: Whether the price can be used for new purchases. Defaults to true.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Ok (Everything worked as expected.)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Price'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Price'
        '400':
          description: Bad Request (The request was unacceptable, often due to missing a required parameter.)
        '401':
          description: Unauthorized	(No valid API key provided.)
        '402':
          description: Request Failed	(The parameters were valid but the request failed.)
        '403':
          description: Forbidden	(The API key doesn’t have permissions to perform the request.)
        '404':
          description: Not Found	(The requested resource doesn’t exist.)
        '409':
          description: Conflict	(The request conflicts with another request (perhaps due to using the same idempotent key).)
        '429':
          description: Too Many Requests	(Too many requests hit the API too quickly. We recommend an exponential backoff of your requests.)
  /prices/:id:
    post:
      tags:
        - prices
      summary: Update a price
      description: Updates the specified price by setting the values of the parameters passed. Any parameters not provided are left unchanged. (The updated price object is returned upon success. Otherwise, this call returns an error.)
      parameters:
        - name: active
          in: query
          description: Whether the price can be used for new purchases. Defaults to true.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Ok (Everything worked as expected.)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Price'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Price'
        '400':
          description: Bad Request (The request was unacceptable, often due to missing a required parameter.)
        '401':
          description: Unauthorized	(No valid API key provided.)
        '402':
          description: Request Failed	(The parameters were valid but the request failed.)
        '403':
          description: Forbidden	(The API key doesn’t have permissions to perform the request.)
        '404':
          description: Not Found	(The requested resource doesn’t exist.)
        '409':
          description: Conflict	(The request conflicts with another request (perhaps due to using the same idempotent key).)
        '429':
          description: Too Many Requests	(Too many requests hit the API too quickly. We recommend an exponential backoff of your requests.)
    get:
      tags:
        - prices
      summary: Retrieve a price
      description: Retrieves the price with the given ID. (Returns a price if a valid price or plan ID was provided. Returns an error otherwise.)
      responses:
        '200':
          description: Ok (Everything worked as expected.)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Price'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Price'
        '400':
          description: Bad Request (The request was unacceptable, often due to missing a required parameter.)
        '401':
          description: Unauthorized	(No valid API key provided.)
        '402':
          description: Request Failed	(The parameters were valid but the request failed.)
        '403':
          description: Forbidden	(The API key doesn’t have permissions to perform the request.)
        '404':
          description: Not Found	(The requested resource doesn’t exist.)
        '409':
          description: Conflict	(The request conflicts with another request (perhaps due to using the same idempotent key).)
        '429':
          description: Too Many Requests	(Too many requests hit the API too quickly. We recommend an exponential backoff of your requests.)
components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
          example: "prod_NWjs8kKbJWmuuc"
          description: Unique identifier for the object.
        name:
          type: string
          example: "Gold Plan"
          description: The product’s name, meant to be displayable to the customer.
        active:
          type: boolean
          example: true
          description: Whether the product is currently available for purchase.
      xml:
        name: product
    Price:
      type: object
      properties:
        id:
          type: string
          example: "price_1MoBy5LkdIwHu7ixZhnattbh"
          description: Unique identifier for the object.
        currency:
          type: string
          enum: 
          - ISO currency codes
          example: "usd"
          description: Three-letter ISO currency code, in lowercase. Must be a supported currency.
        active:
          type: boolean
          example: true
          description: Whether the price can be used for new purchases.
      xml:
        name: price
  requestBodies:
    Product:
      description: Product object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
        application/xml:
          schema:
            $ref: '#/components/schemas/Product'
    Price:
      description: Price object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Price'
        application/xml:
          schema:
            $ref: '#/components/schemas/Price'
